#!/usr/bin/env perl -w

use strict;
use warnings;

use Data::Dumper;
use Getopt::Long;
use TCDB::Assorted;


#==========================================================================
#  Run xgbhit.sh for all GBLAST hits. This will help the analysi of
#  of genomes until this is incorporated into GBLAST.
#==========================================================================


my $gbResultsFile = "";
my $qblastdb  = "nr";
my $outdir    = "./xgbhit";
my $subMatrix = "BL50";
my $owTCblastDB = 0; #Overwrite TC blastdb flag

read_command_line_arguments();
#print Data::Dumper->Dump([$gbResultsFile, $qblastdb, $outdir, $subMatrix, $owTCblastDB],
#                        [qw(*gbResultsFile *qblastdb *outdir *subMatrix, owTCblastDB)]);
#exit;


#==========================================================================
#Extract the TCDB blastDB

my $blastDir = "$ENV{HOME}/db/blastdb";
system "mkdir -p $blastDir" unless (-d $blastDir);

my $cmd1 = "extractFamily.pl -i tcdb -f blast -o $blastDir";
system $cmd1 if ($owTCblastDB || !(-f "$blastDir/tcdb.pin"));



#==========================================================================
#First parse the GBLAST TSV output file and extract the accessions that will
#be used to generate the plots.

open (my $fh, "<", $gbResultsFile) || die $!;
while (<$fh>) {
  chomp;
  next if (/^#Query_id/);

  my ($gacc, $tcacc, $tcid, @kk) = split (/\t/);

  next unless ($gacc && $tcacc && $tcid);

  print "Examining hit: $gacc vs ${tcid}-$tcacc\n";

  #now run examine GBhit
  my $cmd = qq(examineGBhit.pl -q $gacc -s $tcacc -t $tcid -o $outdir/$gacc -bdb  $qblastdb);
  system $cmd unless (-d "xgbhit/$gacc");

}
close $fh;


print "Done!\n";

###########################################################################
##                         SUBROUTINES                                   ##
###########################################################################


sub read_command_line_arguments {

  #if no arguments are given print the help
  if (! @ARGV) {
    print_help();
  }

  #----------------------------------------------------------------------
  #Parse command line arguments

  my $status = GetOptions(
      "gbf=s"  => \&read_gblast_file,
      "bdb=s"  => \&read_qblastdb,
      "o=s"    => \$outdir,
      "m=s"    => \&read_subMatrix,
      "ow!"    => \&read_ow_tcblastdb,
      "h|help" => sub { print_help(); },

      #For arguments that do not look like valid options
      "<>"     => sub { die "Error: Unknown argument: $_[0]\n"; }
  );
  die "\n" unless ($status);

  system "mkdir -p $outdir" unless (-d $outdir);
}


#==========================================================================
#Read the -gbf option

sub read_gblast_file {

  my ($opt, $value) = @_;

  unless (-f $value && !(-z $value)) {
    die "Error: GBlast Results file not found --> $value";
  }

  $gbResultsFile = $value
}




#==========================================================================
#Read the -bdb option. BlastDB for extracting query sequences

sub read_qblastdb {

  my ($opt, $value) = @_;

  my $tmp = "${value}.pin";
  unless (-f $tmp  && !(-z $tmp)) {
    die "BlastDB for query search not found: $value";
  }
  $qblastdb = $value;
}





#==========================================================================
#Option -m (Any matrix supported by ssearch)

sub read_subMatrix {
  my ($opt, $value) = @_;

  my $tmp = uc $value;
  unless ($tmp =~ /^(BL50|BL62|P250|OPT5|VT200|VT160|P120|VT120|BL80|VT80|MD40|VT40|MD20|VT20|MD10|VT10)$/) {
    die "Error in option -$opt: illegal matrix ($value). Value should be any matrix supported by SSEARCH\n";
  }

  $subMatrix = $tmp;
}


#==========================================================================
#Read the -ow option. Overwrite TCDB blast database.

sub read_ow_tcblastdb {

  my ($opt, $value) = @_;

  $owTCblastDB = $value;
}





#==========================================================================

sub print_help {

    my $help = <<"HELP";

Align the query and target proteins allowing for multiple hits. This will
help to spot potential gene duplications when analyzing gblast hits.

Options:

-gbf {FILE} (Mandatory)
     Path to file 'results.tsv' as generated by GBLAST.

-bdb {String} (Optional; Default: nr)
     Blast DB that will be used to extract sequences from the query genome.
     This is requiered if the accessions used in the genome are not in the
     NCBI redundant database (e.g. locus tags).

-o   {PATH} (Default: ./xgbhit)
     Output directory where results will be stored.

-ow  {FLAG} (Optional. Default: inactive)
     If given, the results of the program will overwrite previous results.
     Default behaviour does not overwrite and output directory if it exists.

-m   {string} (Optional. Default: BL50)
     Substitution matrix to use in the alignments. Any matrix supported by
     ssearch36 can be used.

-h, --help
  Print this help. This option takes precedence over anyother option.

HELP

    print $help;
    exit;
}
