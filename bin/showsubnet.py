#!/usr/bin/env python
# coding: utf-8

# In[1]:


import YutanpaNet as ytn
import argparse
import sys


# In[5]:


if __name__ == '__main__':
    # parse arguments
    parser = argparse.ArgumentParser()
    # create a parser to handle options and arguments. Show help info if no args
    parser.add_argument( type = str, dest = 'rn', metavar = '<raw network nodes>')
    parser.add_argument( type = str, dest = 're', metavar = '<raw network edges>')
    parser.add_argument( type = str, dest = 'pn', metavar = '<processed network nodes>')
    parser.add_argument( type = str, dest = 'pe', metavar = '<processed network edges>')
    parser.add_argument( '-ft', '--featuretable', type = str, dest = 'ft', required=True, metavar = '<genome feature table>', help = 'MANDATORY. Path to the feature table file as downloaded from NCBI genome assemblies. This file is used to extract the genomic context of genes and it must be compressed in gzip format.' )
    parser.add_argument( '-lt', '--locus_tag', action = 'store_true', dest = 'lt', default = False, help = 'Flag. If set, the program will use locus_tag accessions to identify proteins in the query genome. Users are responsible for deciding whether RefSeq or locus_tag accessions will be used in the analysis. Default value is RefSeq.')
    parser.add_argument( '-ad', '--address', dest = 'ad', type = str, default = '', metavar = '<directory path>', help = 'Path to the main output directory generated by program getMultCompSystems.pl. This directory will be used to generate links to hydropathy plots for all matches between the query genome and multicomponent systems in TCDB. If not specified, the edges of subnetworks will not be linked to the corresponding hydropathy plots.' )
    parser.add_argument( '-l', '--list', dest = 'list', type = str, metavar = '<accessions list>', help = 'Mandatory. List of TC systems or protein accessions or both, in the genome seperated by comma (e.g., "1.A.30.2.1,dmul_13829").' )
    parser.add_argument( '-w', '--whole', action = 'store_true', dest = 'whole', default = False, help = 'Flag. If set, visualize the whole processed network. This action supersedes any accessions provided with the -l option.' )
    parser.add_argument( '-o', dest = 'out', default = 'isolated_systems.html',  metavar = '<string>', help = 'The name of the subnetwork that will be generated. Default value: isolated_systems.' )
    parser.add_argument( '-c', '--circular', action = 'store_false', dest = 'linear', default = True, help = 'Flag. If set, the replicon structure of the query genome is regarded as circular. This information is used to calculate the distance between pairs of genes. The default setting is: linear.' )
    #parser.add_argument( '-p', '--physics', dest = 'physics', action = 'store_true', default = False, help = 'if set, the sub-network HTML page will show a user interface of the physics engine that users can turn on/off or change other physics engine settings.')
    
    args = parser.parse_args()
    if len(sys.argv) < 6:
        parser.print_help()
        sys.exit(1)
    if args.whole == False and not args.list:
        print('Error, empty accession list!')
        sys.exit(1)
    G = ytn.load_network(args.rn,args.re)
    P = ytn.load_network(args.pn,args.pe)
    if args.linear == True:
        status = 'linear'
    else:
        status = 'non-linear'
    if args.whole == True:
        if 'rest' in args.pn:
            ytn.network_visualization_v2(P,args.ft,args.lt,args.ad,status,args.out,True)
        else:
            ytn.network_visualization_v2(P,args.ft,args.lt,args.ad,status,args.out,False)
    else:
        node_list = [str(item) for item in args.list.split(',')]
        ytn.show_subnetwork(P,G, node_list,args.ft,args.lt,args.ad,status,args.out,False)

